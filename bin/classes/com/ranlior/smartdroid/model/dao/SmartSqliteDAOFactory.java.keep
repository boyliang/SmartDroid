/**
 * 
 */
package com.ranlior.smartdroid.model.dao;

import android.content.Context;

import com.ranlior.smartdroid.model.dao.impl.sqlite.ActionDAO;
import com.ranlior.smartdroid.model.dao.impl.sqlite.RuleDAO;
import com.ranlior.smartdroid.model.dao.impl.sqlite.TriggerDAO;
import com.ranlior.smartdroid.model.dao.logic.IActionDAO;
import com.ranlior.smartdroid.model.dao.logic.IRuleDAO;
import com.ranlior.smartdroid.model.dao.logic.ITriggerDAO;
import com.ranlior.smartdroid.model.database.DatabaseHelper;

/**
 * Singleton.
 * 
 * @author Ran Haveshush
 * Email:  ran.haveshush.shenkar@gmail.com
 *
 */
public class SmartSqliteDAOFactory extends SmartDAOFactory {
	
	/**
	 * Holds the context which invoked this dao.
	 */
	private Context mContext = null;
	
	/**
	 * Holds the sqlite database helper.
	 */
	private DatabaseHelper datebaseHelper = null;
	
	/**
	 * Holds the singleton instance.
	 */
	private static SmartSqliteDAOFactory mInstance = null;
	
	// Private constructor prevents instantiation from other classes
	private SmartSqliteDAOFactory(Context context) {
		datebaseHelper = new DatabaseHelper(context);
	}

	/**
	 * Returns the singleton instance.
	 * 
	 * @return	SmartSqliteDAOFactory singleton
	 */
	public static SmartSqliteDAOFactory getInstance(Context context) {
		if (mInstance == null) {
			synchronized (SmartSqliteDAOFactory.class) {
				if (mInstance == null) {
					mInstance = new SmartSqliteDAOFactory(context);
				}
			}
		}
		return mInstance;
	}

	/**
	 * @return the datebaseHelper
	 */
	public DatabaseHelper getDatebaseHelper() {
		return datebaseHelper;
	}

	/* (non-Javadoc)
	 * @see com.ranlior.smartdroid.model.dao.SmartDAOFactory#getRulesDAO()
	 */
	@Override
	public IRuleDAO getRulesDAO() {
		return new RuleDAO(mContext);
	}

	/* (non-Javadoc)
	 * @see com.ranlior.smartdroid.model.dao.SmartDAOFactory#getTriggerDAO()
	 */
	@Override
	public ITriggerDAO getTriggerDAO() {
		return new TriggerDAO(mContext);
	}

	/* (non-Javadoc)
	 * @see com.ranlior.smartdroid.model.dao.SmartDAOFactory#getActionDAO()
	 */
	@Override
	public IActionDAO getActionDAO() {
		return new ActionDAO(mContext);
	}

}
